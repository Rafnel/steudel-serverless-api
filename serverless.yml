org: zacharysteudel
app: rafnel-api-app
# NOTE: update this with your service name
service: rafnel-api

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs8.10
  stage: prod
  region: us-east-1
  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"


functions:
  createSwimComponent:
    handler: createSwimComponent.main
    events:
      - http:
          path: components
          method: post
          cors: true
          authorizer: aws_iam
  createSwimWorkout:
    handler: createSwimWorkout.main
    events:
      - http:
          path: workouts
          method: post
          cors: true
          authorizer: aws_iam
  createSwimWorkoutFolder:
    handler: createSwimWorkoutFolder.main
    events:
      - http:
          path: folders
          method: post
          cors: true
          authorizer: aws_iam
  deleteSwimWorkoutFolder:
    handler: deleteSwimWorkoutFolder.main
    events:
      - http:
          path: folders/delete
          method: post
          cors: true
          authorizer: aws_iam
  addNewUser:
    handler: addNewUser.main
    events:
      - http:
          path: users
          method: post
          cors: true
          authorizer: aws_iam
  updateSwimComponentLikes:
    handler: updateSwimComponentLikes.main
    events:
      - http:
          path: components/update/likes
          method: post
          cors: true
          authorizer: aws_iam
  updateSwimWorkoutFolder:
    handler: updateSwimWorkoutFolder.main
    events:
      - http:
          path: folders/update
          method: post
          cors: true
          authorizer: aws_iam
  updateWorkoutUsedDate:
    handler: updateWorkoutUsedDate.main
    events:
      - http:
          path: workout/update/date
          method: post
          cors: true
          authorizer: aws_iam
  updateUser:
    handler: updateUser.main
    events:
      - http:
          path: users/update
          method: post
          cors: true
          authorizer: aws_iam
  getSwimComponentByKey:
    handler: getComponentByKey.main
    events:
      - http:
          path: components/{username}/{component_id}
          method: get
          cors: true
          authorizer: aws_iam
  getWorkoutByKey:
    handler: getWorkoutByKey.main
    events:
      - http:
          path: workouts/{username}/{workout_id}
          method: get
          cors: true
          authorizer: aws_iam
  getSortedSwimComponentsBySet:
    handler: getSortedSwimComponentsBySet.main
    events:
      - http:
          path: components/set
          method: post
          cors: true
          authorizer: aws_iam
  getAllSwimWorkoutsFromUser:
    handler: getAllSwimWorkoutsFromUser.main
    events:
      - http:
          path: workouts/user
          method: post
          cors: true
          authorizer: aws_iam
  getSwimFoldersOfUser:
    handler: getSwimFoldersOfUser.main
    events:
      - http:
          path: folders/user
          method: post
          cors: true
          authorizer: aws_iam
  getChildSwimFolders:
    handler: getChildSwimFolders.main
    events:
      - http:
          path: folders/get-parent
          method: post
          cors: true
          authorizer: aws_iam
  getSwimWorkoutsInFolder:
    handler: getSwimWorkoutsInFolder.main
    events:
      - http:
          path: folders/get-workouts
          method: post
          cors: true
          authorizer: aws_iam
  getAllSwimComponentsFromUser:
    handler: getAllSwimComponentsFromUser.main
    events:
      - http:
          path: components/user
          method: post
          cors: true
          authorizer: aws_iam
  getRandomSwimComponent:
    handler: getRandomSwimComponent.main
    events:
      - http:
          path: components/random
          method: get
          cors: true
          authorizer: aws_iam
  getUser:
    handler: getUser.main
    events:
      - http:
          path: user/{username}
          method: get
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
